---
title: "Manipulating/reading data & database practice"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Task 1: Conceptual Questions

1.  If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?

> A: Relative path to get the file: "../MyData.csv"

2.  What are the major benefits of using R projects? 

> A: R projects provide a straightforward way to divide your work into multiple contexts. Each with their own: working directory, workspace, history, folder structure & source documents. It can make keeping analysis separate much easier.

3.  What is git and what is github? 

> A: Git is a version control software. Github is an online hosting service for Git-based projects.

4.  What are the two main differences between a tibble and a data.frame? 

> A: Two main differences between a tibble and a data.frame: tibbles get fancy printing with the default print() method; tibbles do not coerce down to a vector when you subset to only one column using \[.

5.  Rewrite the following nested function call using baseR’s chaining operator:

```{r}
library(dplyr)
arrange(filter(select(as_tibble(iris), 
                      starts_with("Petal"), 
                      Species), 
               Petal.Length < 1.55), 
        Species)
```

> A: Using BaseR's chaining operator:

```{r}
iris[order(iris$Species) & iris$Petal.Length < 1.55, 3:5]
```

6.  What is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?

> Long format data is where each row consists of one observation and each column one variable. Wide format data is where we may have more than one observation in a given row. We generally prefer long format data for statistical analysis.

# Task 2 Reading Delimited Data

## Glass data

1. Read this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).

```{r}
library(tidyverse)
library(readr)
glass_data <- read_delim("https://www4.stat.ncsu.edu/~online/datasets/glass.data",
                         delim = ",",
                         col_names = c("Id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type_of_glass"))
glass_data
```

2. Start a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . . ”, etc.) instead (see the variable descriptions above to give meaningful values). (If you are familiar with factors, feel free to use that instead of a character string variable - otherwise, think if/then/else via ifelse().)

```{r}
glass_data |> 
  mutate(Type_of_glass = ifelse(Type_of_glass == 1,
                                "building_windows_float_processed",
                                ifelse(Type_of_glass == 2, 
                                       "building_windows_non_float_processed",
                                       ifelse(Type_of_glass == 3,
                                              "vehicle_windows_float_processed",
                                              ifelse(Type_of_glass == 4,
                                                     "vehicle_windows_non_float_processed",
                                                     ifelse(Type_of_glass == 5,
                                                            "containers",
                                                            ifelse(Type_of_glass == 6,
                                                                   "tableware",
                                                                   ifelse(Type_of_glass == 7,
                                                                          "headlamps",
                                                                          "Error"))))))))
```

3. Continue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamp”.

```{r}
glass_data |> 
  mutate(Type_of_glass = ifelse(Type_of_glass == 1,
                                "building_windows_float_processed",
                                ifelse(Type_of_glass == 2, 
                                       "building_windows_non_float_processed",
                                       ifelse(Type_of_glass == 3,
                                              "vehicle_windows_float_processed",
                                              ifelse(Type_of_glass == 4,
                                                     "vehicle_windows_non_float_processed",
                                                     ifelse(Type_of_glass == 5,
                                                            "containers",
                                                            ifelse(Type_of_glass == 6,
                                                                   "tableware",
                                                                   ifelse(Type_of_glass == 7,
                                                                          "headlamps",
                                                                          "Error")))))))) |>
  filter(Fe < 0.2, Type_of_glass == "tableware" | Type_of_glass == "headlamps") 
```

## Yeast data

1. Read this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).

```{r}
yeast_data <- read_table("https://www4.stat.ncsu.edu/~online/datasets/yeast.data",
                         col_names = c("seq_name", "mcg", "gvh", "alm", "mit", "erl", "pox", "vac", "nuc", "class"))
yeast_data
```

2. Start a chain that removes the seq_name and nuc columns.

```{r}
yeast_data |>
  select(-seq_name, -nuc)
```

3. Continue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).

```{r}
yeast_data |>
  select(-seq_name, -nuc) |>
  group_by(class) |>
  mutate(across(where(is.numeric), list(mean = mean, median = median),
                .names = "{.col}_{.fn}"))
```

# Task 2: Combining Excel and Delimited Data

1. There is an excel version of the white wine data set available at https://www4.stat.ncsu.edu/~online/datasets/white-wine.xlsx.
   - Download this file
   - Place it in a folder you know (such as your working directory for your project)
   - Import the data from the first sheet using the readxl package
   - Print out the tibble (just call the object name)

```{r}
library(readxl)
white_wine_data <- read_excel("white-wine.xlsx",
                              sheet = excel_sheets("white-wine.xlsx")[1])
white_wine_data
```

2. When you print the data set out to the console, you may notice that some of the variable names are surrounded by backticks. This is because they are non-standard (they include a space in them). We can rename them in a number of ways. We’ll do it by reading in the variable names from the 2nd sheet of the same file.
   - Read in the data from the 2nd sheet. This should return a data frame with one column containing alternative versions of the variable names.
   - Grab that column and overwrite the current column names (colnames()) of your white wine tibble.
   
```{r}
names_wine_data <- read_excel("white-wine.xlsx",
                              sheet = excel_sheets("white-wine.xlsx")[2])
colnames(white_wine_data) <- names_wine_data$Variables
```

3. Lastly, add a column to this data set to indicate the wines are white. That is, add a column that has values of ‘white’ for every observation.

```{r}
white_wine_data <- white_wine_data |> 
  mutate(wine_type = "white")
```

4. There is a semi-colon delimited version of the red wine data set available at https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv.
  - Read this in using the readr package. Be careful that the columns are read in as the correct type!
  - You should replace the variable names as done above
  - You should append a column denoting the type as “red”

```{r}
red_wine_data <- read_delim("https://www4.stat.ncsu.edu/~online/datasets/red-wine.csv",
                            delim = ";")
colnames(red_wine_data) <- names_wine_data$Variables
red_wine_data <- red_wine_data |>
  mutate(wine_type = "red")
```

5. Combine these two data sets into one data set. They both have the exact same columns so this is an easy append task!
   - Use the dplyr::bind_rows() function (see the help) to create one tibble containing all of the wine data.

```{r}
wine_data <- dplyr::bind_rows(white_wine_data, red_wine_data)
wine_data
```

6. Start a chain on your new combined data object to filter the data to only look at high-quality wines (quality > 6.5) and wines that have a reasonable alcohol value (alcohol < 132).

```{r}
wine_data |>
  filter(quality > 6.5, alcohol < 132)
```

7. Continue your chain to now sort the data from highest quality to lowest.

```{r}
wine_data |>
  filter(quality > 6.5, alcohol < 132) |>
  arrange(desc(quality))
```

8. Continue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.

```{r}
wine_data |>
  filter(quality > 6.5, alcohol < 132) |>
  arrange(desc(quality)) |>
  select(contains("acid"), alcohol, wine_type, quality)
```

9. Continue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable.

```{r}
wine_data |>
  filter(quality > 6.5, alcohol < 132) |>
  arrange(desc(quality)) |>
  select(contains("acid"), alcohol, wine_type, quality) |>
  group_by(quality) |>
  mutate(across(alcohol, list(mean = mean, sd = sd),
                .names = "{.col}_{.fn}"))
```

# Task 3: Database Practice

Download the Lahman.db file associated with the Connecting to Databases notes/video.

1. Connect to the database and then look at all of the tables in the database.

```{r}
library(RSQLite)
library(DBI)
con <- dbConnect(RSQLite::SQLite(), "lahman.db")
dbListTables(con)
```

2. Use the tbl() function and dplyr to return all of the data from the Teams table for the year 2015.

```{r}
tbl(con, "Teams") |>
  filter(yearID == 2015) |>
  collect()
```

3. Repeat the above by using the sql() function within tbl() (here you have to write actual SQL!).

```{r}
tbl(con, sql(
  "SELECT `Teams`.*
  FROM `Teams`
  WHERE (`yearID` = 2015.0)")) |>
  collect()
```

4. Return all of the players in the hall of fame, the year they were voted into the hall of fame, and their category (only those three variables!). See the HallOfFame table, the inducted variable is important here.

```{r}
players_data <- tbl(con, "HallOfFame") |>
  select(playerID, yearID, category) |>
  collect()
```

5. Combine the table from the previous question with the People table in order to have the nameFirst and nameLast names added to what was returned above.

```{r}
name_data <- tbl(con, "People") |> 
  select(playerID, nameFirst, nameLast) |>
  collect()
players_data <- left_join(players_data,
          name_data,
          by = join_by(playerID == playerID))
players_data
```

6. Return only the playerID (manager ID in this case), G, W, and L columns from the Managers table. Use chaining to then:
   - Determine the overall win/loss records (sum of wins and sum of losses) for each of these hall of fame managers.
   - Create a new variable that is the career win/loss percentage (Total_W/G_managed). (Note: I did this after collect() otherwise the column type has to be set. . . )
   - Sort the resulting data by the win/loss percentage variable (from largest to smallest).
   
```{r}
managers_data <- tbl(con, "Managers") |>
  select(playerID, G, W, L) |>
  group_by(playerID) |>
  summarize(G_managed = sum(G, na.rm = TRUE),
            Total_W = sum(W, na.rm = TRUE),
            Total_L = sum(L, na.rm = TRUE)) |>
  collect() |>
  mutate(career_win_percentage = Total_W / G_managed) |>
  arrange(desc(career_win_percentage))
managers_data
```

7. Use the results from the previous two questions to answer this one! Return information for only the people that managed a team and were inducted into the hall of fame (regardless of their category in the hall of fame - you want to return all people in the hall of fame that ever managed at all). (Just return all of the variables from both of the above two questions - 9 total columns)

```{r}
result_data <- inner_join(players_data, 
                       managers_data, 
                       by = join_by(playerID == playerID)) |>
  arrange(desc(career_win_percentage)) |>
  collect()
result_data
```

```{r}
dbDisconnect(con)
```

