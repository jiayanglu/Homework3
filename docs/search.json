[
  {
    "objectID": "Manipulating_reading_database.html",
    "href": "Manipulating_reading_database.html",
    "title": "Manipulating/reading data & database practice",
    "section": "",
    "text": "If your working directory is myfolder/homework/, what relative path would you specify to get the file located at myfolder/MyData.csv?\n\n\nA: Relative path to get the file: “../MyData.csv”\n\n\nWhat are the major benefits of using R projects?\n\n\nA: R projects provide a straightforward way to divide your work into multiple contexts. Each with their own: working directory, workspace, history, folder structure & source documents. It can make keeping analysis separate much easier. It is easy to share and used with github.\n\n\nWhat is git and what is github?\n\n\nA: Git is a version control software to help track the changes we commit to the files. Github is an online hosting service for Git-based projects.\n\n\nWhat are the two main differences between a tibble and a data.frame?\n\n\nA: Two main differences between a tibble and a data.frame: tibbles get fancy printing with the default print() method; tibbles do not coerce down to a vector when you subset to only one column using [.\n\n\nRewrite the following nested function call using baseR’s chaining operator:\n\n\nlibrary(dplyr) arrange(filter(select(as_tibble(iris), starts_with(“Petal”), Species), Petal.Length &lt; 1.55), Species)\n\n\nA: Using BaseR’s chaining operator:\n\n\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nas_tibble(iris) |&gt;\n  select(starts_with(\"Petal\"), Species) |&gt; \n  filter(Petal.Length &lt; 1.55) |&gt;\n  arrange(Species)\n\n# A tibble: 37 × 3\n   Petal.Length Petal.Width Species\n          &lt;dbl&gt;       &lt;dbl&gt; &lt;fct&gt;  \n 1          1.4         0.2 setosa \n 2          1.4         0.2 setosa \n 3          1.3         0.2 setosa \n 4          1.5         0.2 setosa \n 5          1.4         0.2 setosa \n 6          1.4         0.3 setosa \n 7          1.5         0.2 setosa \n 8          1.4         0.2 setosa \n 9          1.5         0.1 setosa \n10          1.5         0.2 setosa \n# ℹ 27 more rows\n\n\n\nWhat is meant by long format data and wide format data? Which do we generally prefer for statistical analysis?\n\n\nLong format data is where each row consists of one observation and each column one variable. Wide format data is where we may have more than one observation in a given row. We generally prefer long format data for statistical analysis."
  },
  {
    "objectID": "Manipulating_reading_database.html#glass-data",
    "href": "Manipulating_reading_database.html#glass-data",
    "title": "Manipulating/reading data & database practice",
    "section": "Glass data",
    "text": "Glass data\n\nRead this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\n\nlibrary(readr)\n\nWarning: package 'readr' was built under R version 4.3.3\n\nglass_data &lt;- read_delim(\"https://www4.stat.ncsu.edu/~online/datasets/glass.data\",\n                         delim = \",\",\n                         col_names = c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \"K\", \"Ca\", \"Ba\", \"Fe\", \"Type_of_glass\"))\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Type_of_glass\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;         &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0                1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0                1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0                1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0                1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0                1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26             1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0                1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0                1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0                1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11             1\n# ℹ 204 more rows\n\n\n\nStart a chain that would overwrite the Type_of_glass variable using mutate(). Create a character string version (that is, replace 1 with “building_windows_float_processed”, 2 with “building_win. . .”, etc.) instead (see the variable descriptions above to give meaningful values). (If you are familiar with factors, feel free to use that instead of a character string variable - otherwise, think if/then/else via ifelse().)\n\n\nglass_data |&gt; \n  mutate(Type_of_glass = ifelse(Type_of_glass == 1,\n                                \"building_windows_float_processed\",\n                                ifelse(Type_of_glass == 2, \n                                       \"building_windows_non_float_processed\",\n                                       ifelse(Type_of_glass == 3,\n                                              \"vehicle_windows_float_processed\",\n                                              ifelse(Type_of_glass == 4,\n                                                     \"vehicle_windows_non_float_processed\",\n                                                     ifelse(Type_of_glass == 5,\n                                                            \"containers\",\n                                                            ifelse(Type_of_glass == 6,\n                                                                   \"tableware\",\n                                                                   ifelse(Type_of_glass == 7,\n                                                                          \"headlamps\",\n                                                                          \"Error\"))))))))\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass    \n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;            \n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0    building_windows…\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0    building_windows…\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0    building_windows…\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0    building_windows…\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0    building_windows…\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26 building_windows…\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0    building_windows…\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0    building_windows…\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0    building_windows…\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11 building_windows…\n# ℹ 204 more rows\n\n\n\nContinue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamp”.\n\n\nglass_data |&gt; \n  mutate(Type_of_glass = ifelse(Type_of_glass == 1,\n                                \"building_windows_float_processed\",\n                                ifelse(Type_of_glass == 2, \n                                       \"building_windows_non_float_processed\",\n                                       ifelse(Type_of_glass == 3,\n                                              \"vehicle_windows_float_processed\",\n                                              ifelse(Type_of_glass == 4,\n                                                     \"vehicle_windows_non_float_processed\",\n                                                     ifelse(Type_of_glass == 5,\n                                                            \"containers\",\n                                                            ifelse(Type_of_glass == 6,\n                                                                   \"tableware\",\n                                                                   ifelse(Type_of_glass == 7,\n                                                                          \"headlamps\",\n                                                                          \"Error\")))))))) |&gt;\n  filter(Fe &lt; 0.2, Type_of_glass == \"tableware\" | Type_of_glass == \"headlamps\") \n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Type_of_glass\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;        \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware    \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware    \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware    \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware    \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware    \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware    \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware    \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware    \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware    \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps    \n# ℹ 28 more rows"
  },
  {
    "objectID": "Manipulating_reading_database.html#yeast-data",
    "href": "Manipulating_reading_database.html#yeast-data",
    "title": "Manipulating/reading data & database practice",
    "section": "Yeast data",
    "text": "Yeast data\n\nRead this data into R directly from the URL using functions from the tidyverse. Notice that the data doesn’t include column names - add those (in a manner of your choosing). Print out the tibble (just call the object name).\n\n\nyeast_data &lt;- read_table(\"https://www4.stat.ncsu.edu/~online/datasets/yeast.data\",\n                         col_names = c(\"seq_name\", \"mcg\", \"gvh\", \"alm\", \"mit\", \"erl\", \"pox\", \"vac\", \"nuc\", \"class\"))\n\n\n── Column specification ────────────────────────────────────────────────────────\ncols(\n  seq_name = col_character(),\n  mcg = col_double(),\n  gvh = col_double(),\n  alm = col_double(),\n  mit = col_double(),\n  erl = col_double(),\n  pox = col_double(),\n  vac = col_double(),\n  nuc = col_double(),\n  class = col_character()\n)\n\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nStart a chain that removes the seq_name and nuc columns.\n\n\nyeast_data |&gt;\n  select(-seq_name, -nuc)\n\n# A tibble: 1,484 × 8\n     mcg   gvh   alm   mit   erl   pox   vac class\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT  \n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT  \n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT  \n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC  \n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT  \n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT  \n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT  \n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC  \n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT  \n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT  \n# ℹ 1,474 more rows\n\n\n\nContinue your chain to add columns corresponding to the mean and median of each numeric variable (mcg, gvh, alm, mit, erl, pox, and vac) at each class grouping (see the across() function as we did in the dplyr video!).\n\n\nyeast_data |&gt;\n  select(-seq_name, -nuc) |&gt;\n  group_by(class) |&gt;\n  mutate(across(where(is.numeric), list(mean = mean, median = median),\n                .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;"
  }
]